from typing import List

__version__: str = ...

def get_model_args(dic_path: str) -> str: ...

class DictionaryInfo:
    @property
    def filename(self) -> str: ...
    @property
    def charset(self) -> str: ...
    @property
    def size(self) -> int: ...
    @property
    def type(self) -> int: ...
    @property
    def lsize(self) -> int: ...
    @property
    def rsize(self) -> int: ...
    @property
    def version(self) -> int: ...
    def __repr__(self) -> str: ...

class Node:
    @property
    def surface(self) -> str: ...
    @property
    def feature(self) -> str: ...
    @property
    def id_(self) -> int: ...
    @property
    def length(self) -> int: ...
    @property
    def rlength(self) -> int: ...
    @property
    def rcAttr(self) -> int: ...
    @property
    def lcAttr(self) -> int: ...
    @property
    def posid(self) -> int: ...
    @property
    def char_type(self) -> int: ...
    @property
    def stat(self) -> int: ...
    @property
    def isbest(self) -> int: ...
    @property
    def alpha(self) -> float: ...
    @property
    def beta(self) -> float: ...
    @property
    def prob(self) -> float: ...
    @property
    def wcost(self) -> int: ...
    @property
    def cost(self) -> int: ...
    def __repr__(self) -> str: ...

class Tagger:
    def __init__(self, model_arg: str): ...
    def get_dictionary_info(self) -> List[DictionaryInfo]: ...
    def parse(self, s: str) -> str: ...
    def parse_node_with_lattice(self, s: str) -> List[Node]: ...
    def parse_nbest_with_lattice(self, s: str) -> List[List[Node]]: ...
