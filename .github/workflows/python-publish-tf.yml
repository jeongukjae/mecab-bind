name: Upload mecab-tf

on:
  workflow_dispatch:
    inputs:
      upload_pypi:
        description: 'Upload to PyPi. Set 1 to deploy'
        required: true
        default: '0'

jobs:
  deploy_linux:
    runs-on: ubuntu-latest
    container: quay.io/pypa/manylinux2014_x86_64
    env:
      BAZEL_VERSION: 4.0.0
      TENSORFLOW_VERSION: 2.5.0
      BAZEL_TARGET: linux

    strategy:
      fail-fast: false
      matrix:
        python-version: [3.6, 3.7, 3.8]

    steps:
    - uses: actions/checkout@v2
    - name: Set up bazel
      run: |
        curl -LO https://github.com/bazelbuild/bazel/releases/download/${BAZEL_VERSION}/bazel-${BAZEL_VERSION}-installer-${BAZEL_TARGET}-x86_64.sh
        chmod +x bazel-${BAZEL_VERSION}-installer-${BAZEL_TARGET}-x86_64.sh
        ./bazel-${BAZEL_VERSION}-installer-${BAZEL_TARGET}-x86_64.sh --user
        rm bazel-${BAZEL_VERSION}-installer-${BAZEL_TARGET}-x86_64.sh
    - name: Install deps
      run: |
        python${{ matrix.python-version }} -m pip install --upgrade pip
        python${{ matrix.python-version }} -m pip install twine
        yum install -y patchelf rsync
    - name: Build wheel
      run: |
        export PATH="$PATH:$HOME/bin"
        PYTHON=python${{ matrix.python-version }} ./build_tf_whl.sh
    - name: Build and publish
      env:
        TWINE_USERNAME: ${{ secrets.PYPI_USERNAME }}
        TWINE_PASSWORD: ${{ secrets.PYPI_PASSWORD }}
      run: |
        ./third_party/tf/patch_auditwheel.sh
        for whl in `ls artifacts`; do
          auditwheel repair --plat manylinux2014_x86_64 artifacts/$whl -w wheelhouse
        done;
        if [[ "1" == "${{ github.event.inputs.upload_pypi }}" ]] ; then
          python${{ matrix.python-version }} -m twine upload wheelhouse/*
        fi


  deploy_mac:
    runs-on: macos-latest
    env:
      BAZEL_VERSION: 4.0.0
      TENSORFLOW_VERSION: 2.5.0
      BAZEL_TARGET: darwin

    strategy:
      fail-fast: false
      matrix:
        python-version: [3.6, 3.7, 3.8]

    steps:
    - uses: actions/checkout@v2
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v2
      with:
        python-version: ${{ matrix.python-version }}
    - name: Set up bazel
      run: |
        curl -LO https://github.com/bazelbuild/bazel/releases/download/${BAZEL_VERSION}/bazel-${BAZEL_VERSION}-installer-${BAZEL_TARGET}-x86_64.sh
        chmod +x bazel-${BAZEL_VERSION}-installer-${BAZEL_TARGET}-x86_64.sh
        (echo "===== Bazel installation Attempt: 1 ====" && ./bazel-${BAZEL_VERSION}-installer-${BAZEL_TARGET}-x86_64.sh --user) ||
        (echo "===== Bazel installation Attempt: 2 ====" && ./bazel-${BAZEL_VERSION}-installer-${BAZEL_TARGET}-x86_64.sh --user) ||
        (echo "===== Bazel installation Attempt: 3 ====" && ./bazel-${BAZEL_VERSION}-installer-${BAZEL_TARGET}-x86_64.sh --user) ||
        (echo "===== Bazel installation Step Failed ====" && exit 1);
        export PATH="$PATH:$HOME/bin"
        rm bazel-${BAZEL_VERSION}-installer-${BAZEL_TARGET}-x86_64.sh
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install tensorflow-cpu==${TENSORFLOW_VERSION}
        pip install setuptools wheel twine
    - name: Set up workspace
      run: ./tf_configure.sh
    - name: Build and publish
      env:
        TWINE_USERNAME: ${{ secrets.PYPI_USERNAME }}
        TWINE_PASSWORD: ${{ secrets.PYPI_PASSWORD }}
      run: |
        bazel build -s //tf_ops:build_pip_pkg --verbose_failures
        ./bazel-bin/tf_ops/build_pip_pkg artifacts
        if [[ "1" == "${{ github.event.inputs.upload_pypi }}" ]] ; then
          twine upload artifacts/*
        fi
